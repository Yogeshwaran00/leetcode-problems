Problem-34(Find First and Last Position of Element in Sorted Array)

Description:
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.
If target is not found in the array, return [-1, -1].
You must write an algorithm with O(log n) runtime complexity.

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]
 
Constraints:
0 <= nums.length <= 105
-109 <= nums[i] <= 109
nums is a non-decreasing array.
-109 <= target <= 109

Solution:
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        vector<int>a;
        for(int i=0;i<nums.size();i++){
            if(target==nums[i]){
                a.push_back(i);
            }
        }
        if(a.size()==1){
            int b=a[0];
            a.push_back(b);
        }
        if(a.size()==0){
            a.push_back(-1);
            a.push_back(-1);
        }
        if(a.size()>2){
            int b=a[0];
            int c=a[a.size()-1];
            a.clear();
            a.push_back(b);
            a.push_back(c);
        }
        return a;
    }
};
