Problem-3254(Find the Power of K-Size Subarrays I)

Description:
You are given an array of integers nums of length n and a positive integer k.

The power of an array is defined as:
Its maximum element if all of its elements are consecutive and sorted in ascending order.
-1 otherwise.

You need to find the power of all subarrays of nums of size k.
Return an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].

Example 1:
Input: nums = [1,2,3,4,3,2,5], k = 3
Output: [3,4,-1,-1,-1]
Explanation:
There are 5 subarrays of nums of size 3:
[1, 2, 3] with the maximum element 3.
[2, 3, 4] with the maximum element 4.
[3, 4, 3] whose elements are not consecutive.
[4, 3, 2] whose elements are not sorted.
[3, 2, 5] whose elements are not consecutive.

Example 2:
Input: nums = [2,2,2,2,2], k = 4
Output: [-1,-1]

Example 3:
Input: nums = [3,2,3,2,3,2], k = 2
Output: [-1,3,-1,3,-1]

Constraints:
1 <= n == nums.length <= 500
1 <= nums[i] <= 105
1 <= k <= n

Solution:
class Solution {
public:
    vector<int> resultsArray(vector<int>& nums, int k) {
        vector<int>ans;
        for(int i=0;i<=nums.size()-k;i++){
            vector<int>temp;
            for(int j=0;j<k;j++){
                temp.push_back(nums[i+j]);
            }
            int hold=INT_MIN;
            for(int j=0;j<temp.size();j++){
                // cout<<i<<" "<<temp[j]<<endl;
                if(j+1<temp.size() && temp[j+1]-temp[j]!=1){
                    hold=-1;
                    break;
                }
                else{
                    hold=max(hold,temp[j]);
                }
            }
            if(hold!=-1){
                hold=max(hold,temp[temp.size()-1]);
            }
            // cout<<"-----"<<hold<<"-------"<<endl;
            ans.push_back(hold);
        }
        return ans;
    }
};
