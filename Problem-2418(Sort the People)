Problem-2418(Sort the People)

Solution:
You are given an array of strings names, and an array heights that consists of distinct positive integers. Both arrays are of length n.
For each index i, names[i] and heights[i] denote the name and height of the ith person.
Return names sorted in descending order by the people's heights.

Example 1:
Input: names = ["Mary","John","Emma"], heights = [180,165,170]
Output: ["Mary","Emma","John"]
Explanation: Mary is the tallest, followed by Emma and John.

Example 2:
Input: names = ["Alice","Bob","Bob"], heights = [155,185,150]
Output: ["Bob","Alice","Bob"]
Explanation: The first Bob is the tallest, followed by Alice and the second Bob.
 
Constraints:
n == names.length == heights.length
1 <= n <= 103
1 <= names[i].length <= 20
1 <= heights[i] <= 105
names[i] consists of lower and upper case English letters.
All the values of heights are distinct.

Solution:
class Solution {
public:
    vector<string> sortPeople(vector<string>& names, vector<int>& heights) {
        //1.
        vector<pair<int,string>>a;
        for(int i=0;i<names.size();i++){
            a.push_back(make_pair(heights[i],names[i]));
        }
        sort(a.rbegin(),a.rend());
        vector<string>ans;
        for(auto i:a){
            ans.push_back(i.second);
        }
        return ans;
       //2. // unordered_map<int,string>map;
        // for(int i=0;i<names.size();i++){
        //     map[heights[i]]=names[i];
        // }
        // sort(heights.rbegin(),heights.rend());
        // for(int i=0;i<names.size();i++){
        //     names[i]=map[heights[i]];
        // }
        // return names;
    }
};
