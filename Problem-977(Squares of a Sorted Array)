Problem-977(Squares of a Sorted Array)

Given an integer array nums sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.

Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100].

Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 
Constraints:
1 <= nums.length <= 104
-104 <= nums[i] <= 104
nums is sorted in non-decreasing order.

Solution:if you use the comments line code it will give you the time complexity larger then qsort
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
 int cmp (const void *a, const void *b) {
    return (*(int *)a - *(int *)b);
}
int* sortedSquares(int* nums, int numsSize, int* returnSize) {
    *returnSize=numsSize;
    for(int i=0;i<numsSize;i++){
        nums[i]=nums[i]*nums[i];
    }
    int temp=0;
    //  for(int i = 0; i < numsSize - 1; i++) {
    //     for(int j = 0; j < numsSize - i - 1; j++) {
    //         if(nums[j] > nums[j+1]) {
    //             int temp = nums[j];
    //             nums[j] = nums[j+1];
    //             nums[j+1] = temp;
    //         }
    //     }
    // }
        qsort (nums, numsSize, sizeof(int), cmp);

    return nums;
}
