Problem-73(Set Matrix Zeroes)

Given an m x n integer matrix matrix, if an element is 0, set its entire row and column to 0's.
You must do it in place.

Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Example 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]
 
Constraints:
m == matrix.length
n == matrix[0].length
1 <= m, n <= 200
-231 <= matrix[i][j] <= 231 - 1
 
Follow up:
A straightforward solution using O(mn) space is probably a bad idea.
A simple improvement uses O(m + n) space, but still not the best solution.
Could you devise a constant space solution?

Solution:
public class Solution {
    public void fun(int row,int col, int[][] matrix){
        // for(int i=row;i>=0;i--){
        //     if(matrix[i][col]==0)break;
        //     matrix[i][col]=0;
        // }
        for(int j=0;j<matrix[0].Length;j++){
            // if(matrix[row][j]==0)break;
            matrix[row][j]=0;
        }
        // for(int j=col;j>=0;j--){
        //     // if(matrix[row][j]==0)break;
        //     matrix[row][j]=0;
        // }
        for(int i=0;i<matrix.Length;i++){
            // if(matrix[i][col]==0)break;
            matrix[i][col]=0;
        }
    }
    public void SetZeroes(int[][] matrix) {
        // int[,] arr = new int[matrix.Length,matrix[0].Length];
        // for(int i=0;i<matrix.Length;i++){
        //     for(int j=0;j<matrix[0].Length;j++){
        //         arr[i,j]=matrix[i][j];
        //     }
        // }
        int rows=matrix.Length;
        int cols=matrix[0].Length;
        int[][]copy=new int[rows][];
        for(int i=0;i<rows;i++){
            copy[i]=new int[cols];
            for(int j=0;j<cols;j++){
                copy[i][j]=matrix[i][j];
            }
        }
        for(int i=0;i<matrix.Length;i++){
            for(int j=0;j<matrix[0].Length;j++){
                if(copy[i][j]==0){
                    fun(i,j, matrix);
                    Console.WriteLine(i+" "+j);
                }
            }
        }
        // return matrix;'
    }
}
