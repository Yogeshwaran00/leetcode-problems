Problem-695(Max Area of Island)

Solution:
You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.
The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0.

Example 1:
Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.

Example 2:
Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

Solution:
class Solution {
public:
    int fun(vector<vector<int>>&grid,int i, int j){
        grid[i][j]=0;
        int count=1;
        if(i>0 && grid[i-1][j]==1)
        count+=fun(grid,i-1,j);
        if(j<grid[0].size()-1 && grid[i][j+1]==1)
        count+=fun(grid,i,j+1);
        if(i<grid.size()-1 && grid[i+1][j]==1)
        count+=fun(grid,i+1,j);
        if(j>0 && grid[i][j-1]==1)
        count+=fun(grid,i,j-1);
        return count;
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
      int ans=INT_MIN;
      for(int i=0;i<grid.size();i++){
        for(int j=0;j<grid[0].size();j++){
            if(grid[i][j]==1){
                int temp=fun(grid,i,j);
                ans=max(ans,temp);
            }
        }
      }  
      if(ans==INT_MIN)return 0;
      return ans;
    }
};

