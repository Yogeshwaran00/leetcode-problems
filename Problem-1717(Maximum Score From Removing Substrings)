Problem-1717(Maximum Score From Removing Substrings)

Description:
You are given a string s and two integers x and y. You can perform two types of operations any number of times.

Remove substring "ab" and gain x points.
For example, when removing "ab" from "cabxbae" it becomes "cxbae".
Remove substring "ba" and gain y points.
For example, when removing "ba" from "cabxbae" it becomes "cabxe".
Return the maximum points you can gain after applying the above operations on s.

Example 1:
Input: s = "cdbcbbaaabab", x = 4, y = 5
Output: 19
Explanation:
- Remove the "ba" underlined in "cdbcbbaaabab". Now, s = "cdbcbbaaab" and 5 points are added to the score.
- Remove the "ab" underlined in "cdbcbbaaab". Now, s = "cdbcbbaa" and 4 points are added to the score.
- Remove the "ba" underlined in "cdbcbbaa". Now, s = "cdbcba" and 5 points are added to the score.
- Remove the "ba" underlined in "cdbcba". Now, s = "cdbc" and 5 points are added to the score.
Total score = 5 + 4 + 5 + 5 = 19.

Example 2:
Input: s = "aabbaaxybbaabb", x = 5, y = 4
Output: 20
 
Constraints:
1 <= s.length <= 105
1 <= x, y <= 104
s consists of lowercase English letters.

Solution:
class Solution {
public:
    int maximumGain(string s, int x, int y) {
        // This code leads you to error
        // int score=0;
        // if(x<y){
        // while(s.find("ba")!=string::npos){
        //     score+=y;
        //     int temp=s.find("ba");
        //     s.erase(s.begin()+temp);
        //     s.erase(s.begin()+temp);
        // }
        // while(s.find("ab")!=string::npos){
        //     score+=x;
        //     int temp=s.find("ab");
        //     s.erase(s.begin()+temp);
        //     s.erase(s.begin()+temp);
        // }
        // }
        // else{
        // while(s.find("ab")!=string::npos){
        //     score+=x;
        //     int temp=s.find("ab");
        //     s.erase(s.begin()+temp);
        //     s.erase(s.begin()+temp);
        // }
        // while(s.find("ba")!=string::npos){
        //     score+=y;
        //     int temp=s.find("ba");
        //     s.erase(s.begin()+temp);
        //     s.erase(s.begin()+temp);
        // }
        // }
        // cout<<s;
        // return score;
        if(x<y){
            swap(x,y);
            for(char& c:s){// char c is just a char so to modify the directly we are assigning the & to this
                if(c=='a')c='b';
                else if(c=='b')c='a';
            }
        }
        stack<char>st;
        int score=0;
        for(char c:s){
            if(!st.empty() && st.top()=='a' && c=='b'){
                st.pop();
                score+=x;
            }
            else st.push(c);
        }
        string rem;
        while(!st.empty()){
            rem+=st.top();
            st.pop();
        }
        reverse(rem.begin(),rem.end());
        // for(char c:rem)st.push(c);
        for(char c:rem){
            if(!st.empty() && st.top()=='b' && c=='a'){
                st.pop();
                score+=y;
            }
            else st.push(c);
        }
        return score;
    }
};
