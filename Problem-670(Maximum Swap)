Problem-670(Maximum Swap)

Description:
You are given an integer num. You can swap two digits at most once to get the maximum valued number.
Return the maximum valued number you can get.

Example 1:
Input: num = 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.

Example 2:
Input: num = 9973
Output: 9973
Explanation: No swap.
 
Constraints:
0 <= num <= 108

Solution:
class Solution {
public:
    void numtoarr(int& num,vector<int>& st){
        while(num){
            st.push_back(num%10);
            num/=10;
        }
    }
    int maximumSwap(int num) {
        vector<int>st;
        numtoarr(num,st);
        for(int i=st.size()-1;i>=0;i--){
            if(st[i]<9){
                int ind=i;
                int temp=st[i];
                int swapind=-1;
                int swapvalue=-1;
                bool check=0;
                for(int curr=i-1;curr>=0;curr--){
                    if(temp<st[curr] && swapvalue<=st[curr]){
                        swapind=curr;
                        swapvalue=st[curr];
                        check=1;
                    }
                }
                if(check){
                    st[ind]=swapvalue;
                    st[swapind]=temp;
                    break;
                }
            }
        }
        for(int i=st.size()-1;i>=0;i--){
            num=num*10+st[i];
        }
        return num;
    }
};
