Problem-5(Longest Palindromic Substring)

Description:
Given a string s, return the longest palindromic substring in s.

Example 1:
Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.

Example 2:
Input: s = "cbbd"
Output: "bb"
 
Constraints:
1 <= s.length <= 1000
s consist of only digits and English letters.

Solution:
class Solution {
public:
    bool pali(string a){
        string b=a;
        reverse(b.begin(),b.end());
        return b==a;
    }
    string longestPalindrome(string s) {
        // vector<string>a;
        // for(int i=0;i<s.size();i++){
        //     string temp;
        //     for(int j=1;j<=s.size()-i;j++){
        //         temp=s.substr(i,j);
        //         if(pali(temp))a.push_back(temp);
        //     }
        // }
        // int max=0;
        // int ind=0;
        // for(int i=0;i<a.size();i++){
        //     if(a[i].size()>max){
        //         max=a[i].size();
        //         ind=i;
        //     }
        // }
        // return a[ind];
        vector<string>a;
        if(pali(s)){
            return s;
        }
        for(int i=0;i<s.size();i++){
            string temp;
            for(int j=i;j<s.size();j++){
                if(s[i]==s[j]){
                    string check=s.substr(i,j-i+1);
                    if(pali(check))temp=check;
                }
            }
            a.push_back(temp);
        }
        int max=0;
        int ind;
        for(int i=0;i<a.size();i++){
            cout<<a[i]<<" ";
            if(a[i].size()>max){
                max=a[i].size();
                ind=i;
            }
        }
        return a[ind];
    }
};
