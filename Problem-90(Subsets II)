Problem-90(Subsets II)

Description:
Given an integer array nums that may contain duplicates, return all possible subsets(the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]
 
Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10

Solution:
class Solution {
public:
    void bt(vector<int>& nums,int work,vector<vector<int>>& ans,vector<int>& temp){
        if(work==nums.size()){
            if(find(ans.begin(),ans.end(),temp)==ans.end())
            ans.push_back(temp);
            return ;
        }
        temp.push_back(nums[work]);
        bt(nums,work+1,ans,temp);
        temp.pop_back();
        bt(nums,work+1,ans,temp);
    }
    vector<vector<int>> subsetsWithDup(vector<int>& nums) {
        vector<vector<int>>ans;
        vector<int>temp;
        sort(nums.begin(),nums.end());
        bt(nums,0,ans,temp);
        // vector<vector<int>>ans;
        return ans;
    }
};
