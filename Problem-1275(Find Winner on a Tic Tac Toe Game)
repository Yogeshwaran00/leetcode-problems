Problem-1275(Find Winner on a Tic Tac Toe Game)

Description:
Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:

Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli]. return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".
You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

 Example 1:
Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first.

Example 2:
Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: "B"
Explanation: B wins.

Example 3:
Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: "Draw"
Explanation: The game ends in a draw since there are no moves to make.
 
Constraints:
1 <= moves.length <= 9
moves[i].length == 2
0 <= rowi, coli <= 2
There are no repeated elements on moves.
moves follow the rules of tic tac toe.

Solution:
class Solution {
public:
    string check(vector<vector<int>>& tictoc){
        string ans;
        if(tictoc[0][0]==tictoc[0][1] && tictoc[0][1]==tictoc[0][2] && tictoc[0][0]!=0){
            ans=tictoc[0][0]==1?"A":"B";
            return ans;
        }
        else if(tictoc[1][0]==tictoc[1][1] && tictoc[1][1]==tictoc[1][2] && tictoc[1][0]!=0){
            ans=tictoc[1][0]==1?"A":"B";
            return ans;
        }
        else if(tictoc[2][0]==tictoc[2][1] && tictoc[2][1]==tictoc[2][2] && tictoc[2][0]!=0){
            ans=tictoc[2][0]==1?"A":"B";
            return ans;
        }
        else if(tictoc[0][0]==tictoc[1][0] && tictoc[1][0]==tictoc[2][0] && tictoc[0][0]!=0){
            ans=tictoc[0][0]==1?"A":"B";
            return ans;
        }
        else if(tictoc[0][1]==tictoc[1][1] && tictoc[1][1]==tictoc[2][1] && tictoc[0][1]!=0){
            ans=tictoc[0][1]==1?"A":"B";
            return ans;
        }
        else if(tictoc[0][2]==tictoc[1][2] && tictoc[1][2]==tictoc[2][2] && tictoc[0][2]!=0){
            ans=tictoc[0][2]==1?"A":"B";
            return ans;
        }
        else if(tictoc[0][0]==tictoc[1][1] && tictoc[1][1]==tictoc[2][2] && tictoc[0][0]!=0){
            ans=tictoc[0][0]==1?"A":"B";
            return ans;
        }
        else if(tictoc[0][2]==tictoc[1][1] && tictoc[1][1]==tictoc[2][0] && tictoc[0][2]!=0){
            ans=tictoc[0][2]==1?"A":"B";
            return ans;
        }
        else return "Draw";
    }
    string tictactoe(vector<vector<int>>& moves) {
        if(moves.size()<5)return "Pending";
        vector<int>col(3,0);
        vector<vector<int>>matrix(3,col);
        //unordered_map<int,pair<int,int>map{{1,{0,0}},{2,{0,1}},{3,{0,2}},{4,{1,0}},{5,{1,1}},{6,{1,2}},{7,{2,0}},{8,{2,1}},{9,{2,2}}};
        bool temp=1;
        for(int i=0;i<moves.size();i++){
            int row=moves[i][0];
            int col=moves[i][1];
            if(temp){
                matrix[row][col]=1;
            }
            else{
                matrix[row][col]=2;
            }
            temp^=1;
        }
        string ans=check(matrix);
        if(ans=="Draw" && moves.size()<9)
        return "Pending";
        return ans;
    }
};
