Problem-1980(Find Unique Binary String)

Description:
Given an array of strings nums containing n unique binary strings each of length n, return a binary string of length n that does not appear in nums. If there are multiple answers, you may return any of them.

Example 1:
Input: nums = ["01","10"]
Output: "11"
Explanation: "11" does not appear in nums. "00" would also be correct.

Example 2:
Input: nums = ["00","01"]
Output: "11"
Explanation: "11" does not appear in nums. "10" would also be correct.

Example 3:
Input: nums = ["111","011","001"]
Output: "101"
Explanation: "101" does not appear in nums. "000", "010", "100", and "110" would also be correct.
 
Constraints:
n == nums.length
1 <= n <= 16
nums[i].length == n
nums[i] is either '0' or '1'.
All the strings of nums are unique.

Solution:
class Solution {
public:
    string fun(vector<string>& nums){
        int n=nums[0].size();
        string temp;
        int count=0;
        while(count<17){
            int hold=count;
            while(hold>0){
                temp+=to_string(hold%2);
                hold/=2;
            }
            while(temp.size()!=n){
                temp+="0";
            }
            reverse(temp.begin(),temp.end());
            if(find(nums.begin(),nums.end(),temp)==nums.end()){
                break;
            }
            else temp="";
            count++;
        }
        return temp;
    }
    string findDifferentBinaryString(vector<string>& nums) {
        return fun(nums);
    }
};
