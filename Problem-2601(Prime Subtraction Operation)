Problem-2601(Prime Subtraction Operation)

Description:
You are given a 0-indexed integer array nums of length n.
You can perform the following operation as many times as you want:
Pick an index i that you havenâ€™t picked before, and pick a prime p strictly less than nums[i], then subtract p from nums[i].
Return true if you can make nums a strictly increasing array using the above operation and false otherwise.
A strictly increasing array is an array whose each element is strictly greater than its preceding element.

Example 1:
Input: nums = [4,9,6,10]
Output: true
Explanation: In the first operation: Pick i = 0 and p = 3, and then subtract 3 from nums[0], so that nums becomes [1,9,6,10].
In the second operation: i = 1, p = 7, subtract 7 from nums[1], so nums becomes equal to [1,2,6,10].
After the second operation, nums is sorted in strictly increasing order, so the answer is true.

Example 2:
Input: nums = [6,8,11,12]
Output: true
Explanation: Initially nums is sorted in strictly increasing order, so we don't need to make any operations.

Example 3:
Input: nums = [5,8,3]
Output: false
Explanation: It can be proven that there is no way to perform operations to make nums sorted in strictly increasing order, so the answer is false.
 
Constraints:
1 <= nums.length <= 1000
1 <= nums[i] <= 1000
nums.length == n

Solution:
class Solution {
public:
    bool isprime(int temp){
        if(temp<=1)return 0;
        if(temp<=3)return 1;
        if(temp%2==0 || temp%3==0)return 0;
        // bool flag=1;
        for(int i=5;i<=sqrt(temp);i+=6){
            if(temp%i==0 || temp%(i+2)==0){
                return 0;
            }
        }
        return 1;
    }
    // int fun(int temp){
    //     for(int i=temp-1;i>=2;i--){
    //         if(isprime(i)){
    //             // cout<<endl<<"is prime"<<i<<endl;
    //             return i;
    //         }
    //     }
    //     return 0;
    // }
    bool primeSubOperation(vector<int>& nums) {
        // for(int i=nums.size()-1;i>=0;i--){
        //     if(i-1>=0 && nums[i]<=nums[i-1]){
        //         // cout<<nums[i]<<" ";
        //         int temp=nums[i-1];
        //         nums[i-1]-=fun(temp);
        //         if(nums[i-1]>=nums[i])return 0;
        //     }
        // }
        for(int i=0;i<nums.size();i++){
            int hold=(i==0)?nums[i]:nums[i]-nums[i-1];
            if(hold<=0)return 0;
            int prime=0;
            for(int j=hold-1;j>=2;j--){
                if(isprime(j)){
                    prime=j;
                    break;
                }
            }
            nums[i]-=prime;
        }
        // for(int i=0;i<nums.size()-1;i++){
        //     cout<<nums[i]<<" ";
        //     if(nums[i]<nums[i+1]){
        //         continue;
        //     }
        //     else return 0;
        // }
        return 1;
    }
};
