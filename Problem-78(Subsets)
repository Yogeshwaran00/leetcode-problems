Problem-78(Subsets)

Description:
Given an integer array nums of unique elements, return all possible 
subsets (the power set).
The solution set must not contain duplicate subsets. Return the solution in any order.

Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]
 
Constraints:
1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.

Solution:
class Solution {
public:
    void bt(vector<int>& nums, int work, vector<vector<int>>&res,vector<int>& temp){
        if(work==nums.size()){
            res.push_back(temp);
            return;
        }
        temp.push_back(nums[work]);
        bt(nums,work+1,res,temp);
        temp.pop_back();
        bt(nums,work+1,res,temp);
    }
    vector<vector<int>> subsets(vector<int>& nums) {
        vector<vector<int>>res;
        vector<int>temp;
        bt(nums,0,res,temp);
        return res;
    }
};
