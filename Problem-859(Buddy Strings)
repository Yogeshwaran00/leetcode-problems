Problem-859(Buddy Strings)

Description:
Given two strings s and goal, return true if you can swap two letters in s so the result is equal to goal, otherwise, return false.
Swapping letters is defined as taking two indices i and j (0-indexed) such that i != j and swapping the characters at s[i] and s[j].
For example, swapping at indices 0 and 2 in "abcd" results in "cbad".
 
Example 1:
Input: s = "ab", goal = "ba"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'b' to get "ba", which is equal to goal.

Example 2:
Input: s = "ab", goal = "ab"
Output: false
Explanation: The only letters you can swap are s[0] = 'a' and s[1] = 'b', which results in "ba" != goal.

Example 3:
Input: s = "aa", goal = "aa"
Output: true
Explanation: You can swap s[0] = 'a' and s[1] = 'a' to get "aa", which is equal to goal.
 
Constraints:
1 <= s.length, goal.length <= 2 * 104
s and goal consist of lowercase letters.

Solution:
class Solution {
public:
    bool buddyStrings(string s, string goal) {
        if(s==goal){
            set<char>ch;
            for(char i:s)ch.insert(i);
            return ch.size()<s.size();
        }
        int ch=-1;
        int ch2=-1;
        for(int i=0;i<s.size();i++){
            if(s[i]!=goal[i]){
                if(ch==-1){
                    ch=i;
                }
                else if(ch2==-1){
                    ch2=i;
                }
                else return 0;
            }
        }
        // swap(s[ch],s[ch2]);
        if(ch!=-1 && ch2!=-1){
        char temp=s[ch];
        s[ch]=s[ch2];
        s[ch2]=temp;
        cout<<s;
        }
        return s==goal;
    }
};
