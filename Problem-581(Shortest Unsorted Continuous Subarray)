Problem-581(Shortest Unsorted Continuous Subarray)

Description:
Given an integer array nums, you need to find one continuous subarray such that if you only sort this subarray in non-decreasing order, then the whole array will be sorted in non-decreasing order.
Return the shortest such subarray and output its length.

Example 1:
Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.

Example 2:
Input: nums = [1,2,3,4]
Output: 0

Example 3:
Input: nums = [1]
Output: 0
 
Constraints:
1 <= nums.length <= 104
-105 <= nums[i] <= 105

Follow up: Can you solve it in O(n) time complexity?

Solution:
class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        // int first=0;
        // int last=nums.size()-1;
        // for(int i=0;i<nums.size()-1;i++){
        //     if(nums[i]>nums[i+1])
        //     {
        //         first=i;
        //         break;
        //     }
        // }
        // for(int i=nums.size()-1;i>0;i--){
        //     if(nums[i]>nums[i-1])
        //     {
        //         last=i;
        //         break;
        //     }
        // }
        ///////////
        // if(first==0 && last==nums.size()-1)return 0;
        // return nums.size()-first-last;
        // vector<int>nums1(nums.begin(),nums.end());
        // sort(nums1.begin(),nums1.end());
        // int first=0;
        // int last=0;
        // for(int i=0;i<nums.size();i++){
        //     if(nums[i]!=nums1[i]){
        //         first=i;
        //         break;
        //     }
        // }
        // for(int i=nums.size()-1;i>=0;i--){
        //     if(nums[i]!=nums1[i]){
        //         last=i;
        //         break;
        //     }
        // }
        // if(first==0 && last==0)return 0;
        // return last-first+1;
        ///
         vector<int>nums1(nums.begin(),nums.end());
        sort(nums1.begin(),nums1.end());
        int first=-1;
        int last=-1;
        for(int i=0;i<nums.size();i++){
            if(nums[i]!=nums1[i] && first==-1){
                first=i;
            }
            else if(nums[i]!=nums1[i] && first!=-1){
                last=i;
            }
        }
        if(first==-1 && last==-1)return 0;
        return last-first+1;
    }
};
