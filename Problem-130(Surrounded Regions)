Problem-130(Surrounded Regions)

Description:
You are given an m x n matrix board containing letters 'X' and 'O', capture regions that are surrounded:
Connect: A cell is connected to adjacent cells horizontally or vertically.
Region: To form a region connect every 'O' cell.
Surround: The region is surrounded with 'X' cells if you can connect the region with 'X' cells and none of the region cells are on the edge of the board.
A surrounded region is captured by replacing all 'O's with 'X's in the input matrix board.

Example 1:
Input: board = [["X","X","X","X"],["X","O","O","X"],["X","X","O","X"],["X","O","X","X"]]
Output: [["X","X","X","X"],["X","X","X","X"],["X","X","X","X"],["X","O","X","X"]]
Explanation:
In the above diagram, the bottom region is not captured because it is on the edge of the board and cannot be surrounded.

Example 2:
Input: board = [["X"]]
Output: [["X"]]

 
Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is 'X' or 'O'.

Solution:
class Solution {
public:
    void fun(vector<vector<char>>&grid,int i,int j){
        grid[i][j]='F';
        if(i>0 && grid[i-1][j]=='O')
        fun(grid,i-1,j);
        if(j<grid[0].size()-1 && grid[i][j+1]=='O')
        fun(grid,i,j+1);
        if(i<grid.size()-1 && grid[i+1][j]=='O')
        fun(grid,i+1,j);
        if(j>0 && grid[i][j-1]=='O')
        fun(grid,i,j-1);
    }
    void solve(vector<vector<char>>& board) {
        int row=board.size();
        int col=board[0].size();
        int left=0;
        int right=col-1;
        int bottom=row-1;
        int top=0;
        while(left<=right && top<=bottom){
            for(int i=left;i<=right;i++)
            {
                if(board[top][i]=='O')
                fun(board,top,i);
            }
            top++;
            for(int i=top;i<=bottom;i++){
                if(board[i][right]=='O')
                fun(board,i,right);
            }
            right--;
            if(top<=bottom){
            for(int i=right;i>=left;i--){
                if(board[bottom][i]=='O')
                fun(board,bottom,i);
            }
            bottom--;
            }
            if(left<=right){
            for(int i=bottom;i>=top;i--){
                if(board[i][left]=='O')
                fun(board,i,left);
            }
            left++;
            }
            break;
        }
        for(int i=0;i<board.size();i++){
            for(int j=0;j<board[0].size();j++){
                if(board[i][j]=='O')
                board[i][j]='X';
                else if(board[i][j]=='F')
                board[i][j]='O';
            }
        }
        // return board;
    }
};
